/**
 * Generated by orval v6.5.1 üç∫
 * Do not edit manually.
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 * OpenAPI spec version: 1.0.6
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from 'react-query';
import type {
  ApiResponse,
  UploadFileBody,
  PetBody,
  Pet,
  FindPetsByStatusParams,
  FindPetsByTagsParams,
  UpdatePetWithFormBody,
  Order,
  GetInventory200,
  UserArrayBody,
  User,
  LoginUserParams,
} from './model';
import { customInstance } from './axios-instance';

type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (...args: any) => Promise<infer R> ? R : any;

/**
 * @summary uploads an image
 */
export const uploadFile = (petId: number, uploadFileBody: UploadFileBody) => {
  const formData = new FormData();
  if (uploadFileBody.additionalMetadata !== undefined) {
    formData.append('additionalMetadata', uploadFileBody.additionalMetadata);
  }
  if (uploadFileBody.file !== undefined) {
    formData.append('file', uploadFileBody.file);
  }

  return customInstance<ApiResponse>({ url: `/pet/${petId}/uploadImage`, method: 'post', data: formData });
};

export const useUploadFile = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<typeof uploadFile>,
    TError,
    { petId: number; data: UploadFileBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options || {};

  const mutationFn: MutationFunction<AsyncReturnType<typeof uploadFile>, { petId: number; data: UploadFileBody }> = (
    props
  ) => {
    const { petId, data } = props || {};

    return uploadFile(petId, data);
  };

  return useMutation<AsyncReturnType<typeof uploadFile>, TError, { petId: number; data: UploadFileBody }, TContext>(
    mutationFn,
    mutationOptions
  );
};

/**
 * @summary Add a new pet to the store
 */
export const addPet = (petBody: PetBody) => {
  return customInstance<unknown>({ url: `/pet`, method: 'post', data: petBody });
};

export const useAddPet = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<AsyncReturnType<typeof addPet>, TError, { data: PetBody }, TContext>;
}) => {
  const { mutation: mutationOptions } = options || {};

  const mutationFn: MutationFunction<AsyncReturnType<typeof addPet>, { data: PetBody }> = (props) => {
    const { data } = props || {};

    return addPet(data);
  };

  return useMutation<AsyncReturnType<typeof addPet>, TError, { data: PetBody }, TContext>(mutationFn, mutationOptions);
};

/**
 * @summary Update an existing pet
 */
export const updatePet = (petBody: PetBody) => {
  return customInstance<unknown>({ url: `/pet`, method: 'put', data: petBody });
};

export const useUpdatePet = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<AsyncReturnType<typeof updatePet>, TError, { data: PetBody }, TContext>;
}) => {
  const { mutation: mutationOptions } = options || {};

  const mutationFn: MutationFunction<AsyncReturnType<typeof updatePet>, { data: PetBody }> = (props) => {
    const { data } = props || {};

    return updatePet(data);
  };

  return useMutation<AsyncReturnType<typeof updatePet>, TError, { data: PetBody }, TContext>(
    mutationFn,
    mutationOptions
  );
};

/**
 * Multiple status values can be provided with comma separated strings
 * @summary Finds Pets by status
 */
export const findPetsByStatus = (params?: FindPetsByStatusParams) => {
  return customInstance<Pet[]>({ url: `/pet/findByStatus`, method: 'get', params });
};

export const getFindPetsByStatusQueryKey = (params?: FindPetsByStatusParams) => [
  `/pet/findByStatus`,
  ...(params ? [params] : []),
];

export const useFindPetsByStatus = <TData = AsyncReturnType<typeof findPetsByStatus>, TError = void>(
  params?: FindPetsByStatusParams,
  options?: { query?: UseQueryOptions<AsyncReturnType<typeof findPetsByStatus>, TError, TData> }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getFindPetsByStatusQueryKey(params);

  const queryFn: QueryFunction<AsyncReturnType<typeof findPetsByStatus>> = () => findPetsByStatus(params);

  const query = useQuery<AsyncReturnType<typeof findPetsByStatus>, TError, TData>(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query,
  };
};

/**
 * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
 * @deprecated
 * @summary Finds Pets by tags
 */
export const findPetsByTags = (params?: FindPetsByTagsParams) => {
  return customInstance<Pet[]>({ url: `/pet/findByTags`, method: 'get', params });
};

export const getFindPetsByTagsQueryKey = (params?: FindPetsByTagsParams) => [
  `/pet/findByTags`,
  ...(params ? [params] : []),
];

export const useFindPetsByTags = <TData = AsyncReturnType<typeof findPetsByTags>, TError = void>(
  params?: FindPetsByTagsParams,
  options?: { query?: UseQueryOptions<AsyncReturnType<typeof findPetsByTags>, TError, TData> }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getFindPetsByTagsQueryKey(params);

  const queryFn: QueryFunction<AsyncReturnType<typeof findPetsByTags>> = () => findPetsByTags(params);

  const query = useQuery<AsyncReturnType<typeof findPetsByTags>, TError, TData>(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query,
  };
};

/**
 * Returns a single pet
 * @summary Find pet by ID
 */
export const getPetById = (petId: number) => {
  return customInstance<Pet>({ url: `/pet/${petId}`, method: 'get' });
};

export const getGetPetByIdQueryKey = (petId: number) => [`/pet/${petId}`];

export const useGetPetById = <TData = AsyncReturnType<typeof getPetById>, TError = void>(
  petId: number,
  options?: { query?: UseQueryOptions<AsyncReturnType<typeof getPetById>, TError, TData> }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetPetByIdQueryKey(petId);

  const queryFn: QueryFunction<AsyncReturnType<typeof getPetById>> = () => getPetById(petId);

  const query = useQuery<AsyncReturnType<typeof getPetById>, TError, TData>(queryKey, queryFn, {
    enabled: !!petId,
    ...queryOptions,
  });

  return {
    queryKey,
    ...query,
  };
};

/**
 * @summary Updates a pet in the store with form data
 */
export const updatePetWithForm = (petId: number, updatePetWithFormBody: UpdatePetWithFormBody) => {
  const formUrlEncoded = new URLSearchParams();
  if (updatePetWithFormBody.name !== undefined) {
    formUrlEncoded.append('name', updatePetWithFormBody.name);
  }
  if (updatePetWithFormBody.status !== undefined) {
    formUrlEncoded.append('status', updatePetWithFormBody.status);
  }

  return customInstance<unknown>({ url: `/pet/${petId}`, method: 'post', data: formUrlEncoded });
};

export const useUpdatePetWithForm = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<typeof updatePetWithForm>,
    TError,
    { petId: number; data: UpdatePetWithFormBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options || {};

  const mutationFn: MutationFunction<
    AsyncReturnType<typeof updatePetWithForm>,
    { petId: number; data: UpdatePetWithFormBody }
  > = (props) => {
    const { petId, data } = props || {};

    return updatePetWithForm(petId, data);
  };

  return useMutation<
    AsyncReturnType<typeof updatePetWithForm>,
    TError,
    { petId: number; data: UpdatePetWithFormBody },
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * @summary Deletes a pet
 */
export const deletePet = (petId: number) => {
  return customInstance<unknown>({ url: `/pet/${petId}`, method: 'delete' });
};

export const useDeletePet = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<AsyncReturnType<typeof deletePet>, TError, { petId: number }, TContext>;
}) => {
  const { mutation: mutationOptions } = options || {};

  const mutationFn: MutationFunction<AsyncReturnType<typeof deletePet>, { petId: number }> = (props) => {
    const { petId } = props || {};

    return deletePet(petId);
  };

  return useMutation<AsyncReturnType<typeof deletePet>, TError, { petId: number }, TContext>(
    mutationFn,
    mutationOptions
  );
};

/**
 * @summary Place an order for a pet
 */
export const placeOrder = (order: Order) => {
  return customInstance<Order>({ url: `/store/order`, method: 'post', data: order });
};

export const usePlaceOrder = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<AsyncReturnType<typeof placeOrder>, TError, { data: Order }, TContext>;
}) => {
  const { mutation: mutationOptions } = options || {};

  const mutationFn: MutationFunction<AsyncReturnType<typeof placeOrder>, { data: Order }> = (props) => {
    const { data } = props || {};

    return placeOrder(data);
  };

  return useMutation<AsyncReturnType<typeof placeOrder>, TError, { data: Order }, TContext>(
    mutationFn,
    mutationOptions
  );
};

/**
 * For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
 * @summary Find purchase order by ID
 */
export const getOrderById = (orderId: number) => {
  return customInstance<Order>({ url: `/store/order/${orderId}`, method: 'get' });
};

export const getGetOrderByIdQueryKey = (orderId: number) => [`/store/order/${orderId}`];

export const useGetOrderById = <TData = AsyncReturnType<typeof getOrderById>, TError = void>(
  orderId: number,
  options?: { query?: UseQueryOptions<AsyncReturnType<typeof getOrderById>, TError, TData> }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetOrderByIdQueryKey(orderId);

  const queryFn: QueryFunction<AsyncReturnType<typeof getOrderById>> = () => getOrderById(orderId);

  const query = useQuery<AsyncReturnType<typeof getOrderById>, TError, TData>(queryKey, queryFn, {
    enabled: !!orderId,
    ...queryOptions,
  });

  return {
    queryKey,
    ...query,
  };
};

/**
 * For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
 * @summary Delete purchase order by ID
 */
export const deleteOrder = (orderId: number) => {
  return customInstance<unknown>({ url: `/store/order/${orderId}`, method: 'delete' });
};

export const useDeleteOrder = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<AsyncReturnType<typeof deleteOrder>, TError, { orderId: number }, TContext>;
}) => {
  const { mutation: mutationOptions } = options || {};

  const mutationFn: MutationFunction<AsyncReturnType<typeof deleteOrder>, { orderId: number }> = (props) => {
    const { orderId } = props || {};

    return deleteOrder(orderId);
  };

  return useMutation<AsyncReturnType<typeof deleteOrder>, TError, { orderId: number }, TContext>(
    mutationFn,
    mutationOptions
  );
};

/**
 * Returns a map of status codes to quantities
 * @summary Returns pet inventories by status
 */
export const getInventory = () => {
  return customInstance<GetInventory200>({ url: `/store/inventory`, method: 'get' });
};

export const getGetInventoryQueryKey = () => [`/store/inventory`];

export const useGetInventory = <TData = AsyncReturnType<typeof getInventory>, TError = unknown>(options?: {
  query?: UseQueryOptions<AsyncReturnType<typeof getInventory>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetInventoryQueryKey();

  const queryFn: QueryFunction<AsyncReturnType<typeof getInventory>> = () => getInventory();

  const query = useQuery<AsyncReturnType<typeof getInventory>, TError, TData>(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query,
  };
};

/**
 * @summary Creates list of users with given input array
 */
export const createUsersWithArrayInput = (userArrayBody: UserArrayBody) => {
  return customInstance<unknown>({ url: `/user/createWithArray`, method: 'post', data: userArrayBody });
};

export const useCreateUsersWithArrayInput = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<typeof createUsersWithArrayInput>,
    TError,
    { data: UserArrayBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options || {};

  const mutationFn: MutationFunction<AsyncReturnType<typeof createUsersWithArrayInput>, { data: UserArrayBody }> = (
    props
  ) => {
    const { data } = props || {};

    return createUsersWithArrayInput(data);
  };

  return useMutation<AsyncReturnType<typeof createUsersWithArrayInput>, TError, { data: UserArrayBody }, TContext>(
    mutationFn,
    mutationOptions
  );
};

/**
 * @summary Creates list of users with given input array
 */
export const createUsersWithListInput = (userArrayBody: UserArrayBody) => {
  return customInstance<unknown>({ url: `/user/createWithList`, method: 'post', data: userArrayBody });
};

export const useCreateUsersWithListInput = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<typeof createUsersWithListInput>,
    TError,
    { data: UserArrayBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options || {};

  const mutationFn: MutationFunction<AsyncReturnType<typeof createUsersWithListInput>, { data: UserArrayBody }> = (
    props
  ) => {
    const { data } = props || {};

    return createUsersWithListInput(data);
  };

  return useMutation<AsyncReturnType<typeof createUsersWithListInput>, TError, { data: UserArrayBody }, TContext>(
    mutationFn,
    mutationOptions
  );
};

/**
 * @summary Get user by user name
 */
export const getUserByName = (username: string) => {
  return customInstance<User>({ url: `/user/${username}`, method: 'get' });
};

export const getGetUserByNameQueryKey = (username: string) => [`/user/${username}`];

export const useGetUserByName = <TData = AsyncReturnType<typeof getUserByName>, TError = void>(
  username: string,
  options?: { query?: UseQueryOptions<AsyncReturnType<typeof getUserByName>, TError, TData> }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetUserByNameQueryKey(username);

  const queryFn: QueryFunction<AsyncReturnType<typeof getUserByName>> = () => getUserByName(username);

  const query = useQuery<AsyncReturnType<typeof getUserByName>, TError, TData>(queryKey, queryFn, {
    enabled: !!username,
    ...queryOptions,
  });

  return {
    queryKey,
    ...query,
  };
};

/**
 * This can only be done by the logged in user.
 * @summary Updated user
 */
export const updateUser = (username: string, user: User) => {
  return customInstance<unknown>({ url: `/user/${username}`, method: 'put', data: user });
};

export const useUpdateUser = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<AsyncReturnType<typeof updateUser>, TError, { username: string; data: User }, TContext>;
}) => {
  const { mutation: mutationOptions } = options || {};

  const mutationFn: MutationFunction<AsyncReturnType<typeof updateUser>, { username: string; data: User }> = (
    props
  ) => {
    const { username, data } = props || {};

    return updateUser(username, data);
  };

  return useMutation<AsyncReturnType<typeof updateUser>, TError, { username: string; data: User }, TContext>(
    mutationFn,
    mutationOptions
  );
};

/**
 * This can only be done by the logged in user.
 * @summary Delete user
 */
export const deleteUser = (username: string) => {
  return customInstance<unknown>({ url: `/user/${username}`, method: 'delete' });
};

export const useDeleteUser = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<AsyncReturnType<typeof deleteUser>, TError, { username: string }, TContext>;
}) => {
  const { mutation: mutationOptions } = options || {};

  const mutationFn: MutationFunction<AsyncReturnType<typeof deleteUser>, { username: string }> = (props) => {
    const { username } = props || {};

    return deleteUser(username);
  };

  return useMutation<AsyncReturnType<typeof deleteUser>, TError, { username: string }, TContext>(
    mutationFn,
    mutationOptions
  );
};

/**
 * @summary Logs user into the system
 */
export const loginUser = (params?: LoginUserParams) => {
  return customInstance<string>({ url: `/user/login`, method: 'get', params });
};

export const getLoginUserQueryKey = (params?: LoginUserParams) => [`/user/login`, ...(params ? [params] : [])];

export const useLoginUser = <TData = AsyncReturnType<typeof loginUser>, TError = void>(
  params?: LoginUserParams,
  options?: { query?: UseQueryOptions<AsyncReturnType<typeof loginUser>, TError, TData> }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getLoginUserQueryKey(params);

  const queryFn: QueryFunction<AsyncReturnType<typeof loginUser>> = () => loginUser(params);

  const query = useQuery<AsyncReturnType<typeof loginUser>, TError, TData>(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query,
  };
};

/**
 * @summary Logs out current logged in user session
 */
export const logoutUser = () => {
  return customInstance<unknown>({ url: `/user/logout`, method: 'get' });
};

export const getLogoutUserQueryKey = () => [`/user/logout`];

export const useLogoutUser = <TData = AsyncReturnType<typeof logoutUser>, TError = void>(options?: {
  query?: UseQueryOptions<AsyncReturnType<typeof logoutUser>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getLogoutUserQueryKey();

  const queryFn: QueryFunction<AsyncReturnType<typeof logoutUser>> = () => logoutUser();

  const query = useQuery<AsyncReturnType<typeof logoutUser>, TError, TData>(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query,
  };
};

/**
 * This can only be done by the logged in user.
 * @summary Create user
 */
export const createUser = (user: User) => {
  return customInstance<unknown>({ url: `/user`, method: 'post', data: user });
};

export const useCreateUser = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<AsyncReturnType<typeof createUser>, TError, { data: User }, TContext>;
}) => {
  const { mutation: mutationOptions } = options || {};

  const mutationFn: MutationFunction<AsyncReturnType<typeof createUser>, { data: User }> = (props) => {
    const { data } = props || {};

    return createUser(data);
  };

  return useMutation<AsyncReturnType<typeof createUser>, TError, { data: User }, TContext>(mutationFn, mutationOptions);
};
